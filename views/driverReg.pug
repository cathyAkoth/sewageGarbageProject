doctype html
html(lang='en')
  head
    meta(charset="UTF-8")
    meta(name="viewpoint" content="=*width=device-width, initial-scale=1.0*")
    meta(http-equiv="X-UA-Compatible" content="ie=edge")

    link(rel='stylesheet', href='/css/driver.css')
    
    link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css', rel='stylesheet', integrity='sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl', crossorigin='anonymous')
    
    title register truck drivers
    
  body
    .header
      h1
        | STAY CLEAN-
        i THE CLEANEST OPTION
    h3 TRUCK DRIVER REGISTRATION FORM
  .container-fluid
    .row
        .col-4 
        
          
              
        .col-5 
       
          form(action='#', name='driverRegForm')
            label(for='fname') First Name
            |         
            input#fname(type='text', name='firstname', placeholder="Driver's First Name")
            |     
            |         
            label(for='lname') Last Name
            |         
            input#lname(type='text', name='lastname', placeholder="Driver's First Name")
            |     
            |         
            label(for='gender') Gender
            |         
            select#gender(name='gender')
              option(value='')
              |  
              |         
              option(value='Female') Female
              |         
              option(value='Male') Male

            label(for='age') Age

            input#age(type='number', name=age)
          
            |         
            label(for='date') D.O.B:
            |         
            input#date(type='date', name='date')
            |     
            |         
            label(for='nin') NIN
            |         
            input#nin(type='text', name='nin', placeholder="Driver's Identification Number", *='')

            label(for='drivingliscence') Driving liscence No.
            |         
            input#drivingliscence(type='number', name='drivingliscence', placeholder="Driving liscence number")
            |     
            |     
            |         
            label(for='dresidence') Residence
            |         
            input#dresidence(type='text', name='dresidence', placeholder="Driver's Residence No.")
            |     
            |         
            label(for='pincidences') Past Incidences
            |         
            select#pincidences(name='pincidences')
              option(value='') 
              |           
              option(value='accidents') accidents
              |           
              option(value='fights') Fights
              |           
              option(value='theft') Theft
              |           
              option(value='none') None
            input(type='submit', value='Submit')

        |     
        .col-3
            
     

            script.
              const name1 = document.driverRegForm.fname;
              const name2= document.driverRegForm.lname;
              const  gender1= document.driverRegForm.gender;
              const date1 = document.driverRegForm.date;
              const nin1 = document.driverRegForm.nin;
              const residence = document.driverRegForm.dresidence;
              const liscence = document.driverRegForm.drivingliscence;
              const incidences = document.driverRegForm.pincidences;
              const age1 = document.driverRegForm.age;
              /** Validating first name so that it starts with a capital letter, can not be left empty, has more than 1 character and less than 51 characters.
              An alert will be thrown incase any of the validations is violated and the field will be highted with red borders.
              */
              const nameFunction = () => {
              const min = 2;
              const max = 50;
              const letters = /^[A-Z]+[a-zA-Z]*$/
              if (name1.value === '') {
              alert('please fill in the first name');
              name1.style.border = '2px solid red';
              name1.focus();
              } else {
              if (name1.value.length < min) {
              name1.focus();
              name1.style.border = '2px solid red';
              alert('The first name must be more than 1 character!');
              }else{
              if(name1.value.length>max){
              name1.focus();
              name1.style.border = '2px solid red'
              } else {
              if (!name1.value.match(letters)) {
              name1.focus();
              name1.style.border = '2px solid red';
              alert('The first name must start with a capital letter.');
              return false;
              } // Ensures only alphabetical characters are fill-in.
              return true;
              } // Ensures the name field has more than 3 characters.
              return true;
              } // checks if the name field is empty!
              return true;
              };
              }
              // for last name
              const nameFunction1 = () => {
              const min = 2;
              const max = 50;
              const letters = /^[A-Z]+[a-zA-Z]*$/
              if (name2.value === '') {
              alert('please fill in the last name!');
              name2.style.border = '2px solid red';
              name2.focus();
              }else {
              if (name2.value.length < min) {
              name2.focus();
              name2.style.border = '2px solid red';
              alert('The last name must be more than 1 character!');
              }else{
              if(name2.value.length>max){
              name2.focus();
              name2.style.border = '2px solid red'
              }else{
              if (!name2.value.match(letters)) {
              name2.focus();
              name2.style.border = '2px solid red';
              alert('The last name must start with a capital letter.');
              return false;
              } // Ensures only alphabetical characters are fill-in.
              return true;
              } // Ensures the name field has more than 3 characters.
              return true;
              } // checks if the name field is empty!
              return true;
              }
              }

              const residenceFunction = () => {
              if (residence.value === '') {
              residence.style.border = '2px solid red';
              alert('Please include driver residence');
              residence.focus();
              } else {
              return true;
              } //  Ensure residence field is not empty.
              return true;
              };

              const valueDate = ()=>{
              if(date1.value === ''){
              date1.style.border= '2px solid red';
              alert('date is empty,please fill it');
              date1.focus();
              }else{
              return true;
              }
              return true
              };

              const ageFunction = ()=>{
                var min = 30
              if(age1.value === ''){
              age1.style.border = '2px solid red';
              alert('please fill in the age');
              age1.focus();
              }else{
              if(age1.value < min){
              age1.style.border = '2px solid red';
              alert('driver must be older than 30years');
              age1.focus();
              return false;
              }else{
              return true;
              }
              return true;
              }
              return true;
              }

              

              const genderFunction = ()=>{
              if(gender1.value === ''){
              gender1.style.border= '2px solid red';
              alert('gender is empty,please fill it');
              gender1.focus();
              }else{
              return true;
              }
              return true
              };

              const ninFunction = ()=>{
              if(nin1 .value === ''){
              nin1 .style.border= '2px solid red';
              alert('NIN is empty,please fill it');
              nin1.focus();
              }else{
              return true;
              }
              return true
              };

              const incidenceFunction = ()=>{
              if(incidences.value === ''){
              incidences.style.border= '2px solid red';
              alert('past incidence is empty,please fill it');
              date1.focus();
              }else{
              return true;
              }
              return true
              };

              const liscenceFunction = ()=>{
              if(liscence.value === ''){
              liscence.style.border= '2px solid red';
              alert('driving liscence');
              liscence.focus();
              }else{
              return true;
              }
              return true
              };


              const validation = () => {
              nameFunction();
              nameFunction1();
              residenceFunction();
              ageFunction();
              valueDate();
              genderFunction();
              ninFunction();
              incidenceFunction();
              liscenceFunction();
              };

              document.driverRegForm.addEventListener('submit', validation); // Watches the validity of data filled in.
            script(src='https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js', integrity='sha384-b5kHyXgcpbZJO/tY9Ul7kGkf1S0CWuKcCD38l8YkeH8z8QjE0GmW1gYU5S9FOnJ0', crossorigin='anonymous')

              
            