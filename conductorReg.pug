extends layout
block content
    title STAY CLEAN. A stay clean initiative
  
    style.
      body{
    
        background-image:url("/images/orange1.jpg");
        background-repeat:repeat;   
      }

      input[type=text], select {
      width: 100%;
      padding: 12px 20px;
      margin: 10px 0;
      display: inline-block;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
      background-color:#787878;
      
      }
      input[type=date], select {
      width: 100%;
      padding: 12px 20px;
      margin: 10px 0;
      display: inline-block;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
      background-color:#787878;
      
      }
      input[type=number], select {
      width: 100%;
      padding: 12px 20px;
      margin: 10px 0;
      display: inline-block;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
      background-color:#787878;
      
      }
      input[type=string], select {
      width: 100%;
      padding: 12px 20px;
      margin: 10px 0;
      display: inline-block;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
      background-color:#787878;
      }
      h5{
        text-align: center ;
        color: orange;
      }
      input[type=submit] {
      width: 100%;
      background-color: orange;
      color: white;
      padding: 14px 20px;
      margin: 10px 0;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      }
      .card{
        background:#3c3c3c;
        top:14%;

      }
      header{
      background-color: #fff;
      display: flex;
      justify-content: space-between;
      padding: 1rem;
      box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
      position: fixed;
      left: 0;
      width: 100%;
      height:13%;
      top:0;
      z-index: 100;
      transition: left 300ms;
      
      
      }
      #nav-toggle{
      display:none;
      }
      header h2{
      color: green;
      }
      #logoArea{
        height:150%;
      }
      header label span{
      font-size: 1.7rem;
      padding-right: 1rem;

        }
        
        input[type=submit]:hover {
        background-color: orangered;
        }
        .card-body{
          color:green;
          font-weight:bold;
        }
    body
      .main-content
          header
            h2
              .header-title
                img#logoArea(src="/images/signage2.png")
                label(for='')
                  
                |                 STAY CLEAN
            |       
        
        
          div
          .container-fluid
            .row
              .col-4
                
                      
              .col-5
                .card 
                  h5 CONDUCTOR REGISTRATION FORM
                  .card-body
                    form(method='POST', action='/conductorReg', name='conductorRegForm')
                      label(for='fname') First Name
                                  
                      input#fname(type='text', name='firstname', placeholder="Conductor's First Name")
                              
                                  
                      label(for='lname') Last Name
                                  
                      input#lname(type='text', name='lastname', placeholder="Conductor's last Name")
                                      
                      label(for='gender') Gender
                                  
                      select#gender(name='gender')
                        option(value='')

                        option(value='Female') Female
                                      
                        option(value='Male') Male
                                  
                      label(for='date') D.O.B:
                                  
                      input(type='date', id='date', name='date')

                      label(for='age') AGE:
                                  
                      input(type='number', id='age', name='age')
                      br        
                                  
                      label(for='nin') NIN
                                  
                      input#nin(type='text', name='nin', placeholder="Conductors's Identification Number", *='')
                                  
                      label(for='phone') Tel
                                  
                      input#phone(type='string', name='phone', placeholder="Phone Number", *='')
                      label(for='cresidence') Residence
                                  
                      input#cresidence(type='text', name='cresidence', placeholder="Conductors's Residence No.")
                              
                              
                              
                      input(type='submit', value='Submit')

                  .col-3 

                    script.
                      const name12 = document.conductorRegForm.fname;
                      const name2= document.conductorRegForm.lname;
                      const gender1= document.conductorRegForm.gender;
                      const date1 = document.conductorRegForm.date;
                      const age1 = document.conductorRegForm.age;
                      const nin1 = document.conductorRegForm.nin;
                      const residence = document.conductorRegForm.cresidence;
                      
                      /** Validating first name so that it starts with a capital letter, can not be left empty, has more than 1 character and less than 51 characters.
                      An alert will be thrown incase any of the validations is violated and the field will be highted with red borders.
                      */
                      const nameFunction = () => {
                      
                      const min = 2;
                      const max = 50;
                      const letters = /^[A-Z]+[a-zA-Z]*$/
                      
                      if (name12.value === '') {
                      alert('please fill in the first name');
                      name12.style.border = '2px solid red';
                      name12.focus();
                      } else {
                      if (name12.value.length < min) {
                      name12.focus();
                      name12.style.border = '2px solid red';
                      alert('The first name must be more than 1 character!');
                      }else{
                      if(name12.value.length>max){
                      name12.focus();
                      name12.style.border = '2px solid red'
                      } else {
                      if (!name12.value.match(letters)) {
                      name12.focus();
                      name12.style.border = '2px solid red';
                      alert('The first name must start with a capital letter.');
                      return false;
                      } // Ensures only alphabetical characters are fill-in.
                      return true;
                      } // Ensures the name field has more than 3 characters.
                      return true;
                      } // checks if the name field is empty!
                      return true;
                      };
                      }
                      // for last name
                      const nameFunction1 = () => {
                      
                      const min = 2;
                      const max = 50;
                      const letters = /^[A-Z]+[a-zA-Z]*$/
                      
                      if (name2.value === '') {
                      alert('please fill in the last name!');
                      name2.style.border = '2px solid red';
                      name2.focus();
                      }else {
                      if (name2.value.length < min) {
                      name2.focus();
                      name2.style.border = '2px solid red';
                      alert('The last name must be more than 1 character!');
                      }else{
                      if(name2.value.length>max){
                      name2.focus();
                      name2.style.border = '2px solid red'
                      }else{
                      if (!name2.value.match(letters)) {
                      name2.focus();
                      name2.style.border = '2px solid red';
                      alert('The last name must start with a capital letter.');
                      return false;
                      } // Ensures only alphabetical characters are fill-in.
                      return true;
                      } // Ensures the name field has more than 3 characters.
                      return true;
                      } // checks if the name field is empty!
                      return true;
                      }
                      }

                      const residenceFunction = () => {
                      if (residence.value === '') {
                      residence.style.border = '2px solid red';
                      alert('Please include driver residence');
                      residence.focus();
                      } else {
                      return true;
                      } //  Ensure residence field is not empty.
                      return true;
                      };

                      const valueDate = ()=>{
                      if(date1.value === ''){
                      date1.style.border= '2px solid red';
                      alert('date is empty,please fill it');
                      date1.focus();
                      }else{
                      return true;
                      }
                      return true
                      };

                      const ageFunction = () =>{
                        const min1 = 18;

                        if(age1.value === ''){
                          age1.style.border = '2px solid red';
                          alert('age is empty');
                          age1.focus();
                        }else{
                        if(age1.value < min1){
                          age1.focus();
                          age1.style.border = '2px solid red';
                          alert('conductor must be 18years and above')
                          return false;
                          }
                          return true;
                        }
                        return true;
                      
                      };


                      const genderFunction = ()=>{
                      if(gender1.value === ''){
                      gender1.style.border= '2px solid red';
                      alert('gender is empty,please fill it');
                      gender1.focus();
                      }else{
                      return true;
                      }
                      return true
                      };

                      const ninFunction = ()=>{
                        const min2 = 14;
                        const reg2 = /[A-Z]{2}[0-9]{8}[A-Z]{2}[0-9]{1}[A-Z]{1}/
                      
                      if(nin1 .value === ''){
                      nin1 .style.border= '2px solid red';
                      alert('NIN is empty,please fill it');
                      nin1.focus();
                      }else{
                      if(nin1.value.length !== min2){
                        nin1.focus();
                        nin1.style.border = '2px solid red';
                        alert('NIN must have 14 characters')
                      }else{
                        if(!nin1.value.match(reg2)){
                          nin1.style.border = '2px solid red'
                          alert('please insert the correct NIN')
                          return false; 
                      }
                      
                      return true;
                      }
                      return true;
                      }
                      return true;
                      }

                      const validation = () => {
                      nameFunction();
                      nameFunction1();
                      residenceFunction();
                      valueDate();
                      ninFunction();
                      genderFunction();
                      ageFunction();
                      };
                      document.conductorRegForm.addEventListener('submit', validation); // Watches the validity of data filled in.
                        
                              
                    
                            
            script(src='https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js', integrity='sha384-b5kHyXgcpbZJO/tY9Ul7kGkf1S0CWuKcCD38l8YkeH8z8QjE0GmW1gYU5S9FOnJ0', crossorigin='anonymous')
